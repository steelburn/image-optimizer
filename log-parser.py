#!/usr/bin/env python3

"""
log_parser.py - Generate HTML report from image optimization logs
This script parses the log file generated by the image_optimizer.sh script
and creates a detailed HTML report with savings statistics.
"""

import re
import os
import sys
import argparse
from datetime import datetime
from collections import defaultdict

def parse_args():
    """Parse command line arguments"""
    parser = argparse.ArgumentParser(description='Generate HTML report from image optimization logs')
    parser.add_argument('-l', '--log-file', default='/var/log/image_optimizer.log',
                        help='Path to the log file (default: /var/log/image_optimizer.log)')
    parser.add_argument('-o', '--output', default='optimization_report.html',
                        help='Output HTML file (default: optimization_report.html)')
    parser.add_argument('-t', '--title', default='Image Optimization Report',
                        help='Report title (default: Image Optimization Report)')
    return parser.parse_args()

def parse_log_file(log_file):
    """Parse the log file and extract optimization data"""
    if not os.path.exists(log_file):
        print(f"Error: Log file '{log_file}' not found.")
        sys.exit(1)
    
    data = {
        'start_time': None,
        'end_time': None,
        'files': [],
        'optimized_count': 0,
        'skipped_count': 0,
        'failed_count': 0,
        'total_size_before': 0,
        'total_size_after': 0,
        'file_types': defaultdict(lambda: {'count': 0, 'saved_bytes': 0, 'original_bytes': 0})
    }
    
    # Regular expressions for parsing the log
    timestamp_pattern = re.compile(r'\[(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})\]')
    start_pattern = re.compile(r'Starting image optimization process')
    end_pattern = re.compile(r'Image optimization process completed')
    optimize_pattern = re.compile(r'Optimized (JPEG|PNG|TIFF|PDF): (.+) \(saved (\d+)%\)')
    skipped_pattern = re.compile(r'Skipped (JPEG|PNG|TIFF|PDF): (.+)')
    failed_pattern = re.compile(r'Failed to optimize (JPEG|PNG|TIFF|PDF): (.+)')
    
    with open(log_file, 'r') as f:
        for line in f:
            timestamp_match = timestamp_pattern.search(line)
            if timestamp_match:
                timestamp = timestamp_match.group(1)
                
                # Check for start and end times
                if start_pattern.search(line) and not data['start_time']:
                    data['start_time'] = timestamp
                elif end_pattern.search(line):
                    data['end_time'] = timestamp
                
                # Check for optimized files
                optimize_match = optimize_pattern.search(line)
                if optimize_match:
                    file_type, file_path, saved_percentage = optimize_match.groups()
                    saved_percentage = int(saved_percentage)
                    
                    # Try to extract file size information from log line or use estimation
                    file_size_before = 0
                    file_size_after = 0
                    
                    # Extract size information by re-reading the file if it exists
                    if os.path.exists(file_path):
                        file_size_after = os.path.getsize(file_path)
                        # Calculate the original size based on the saved percentage
                        if saved_percentage > 0:
                            file_size_before = int(file_size_after / (1 - saved_percentage/100))
                        else:
                            file_size_before = file_size_after
                    
                    # Record the file information
                    file_info = {
                        'type': file_type,
                        'path': file_path,
                        'filename': os.path.basename(file_path),
                        'directory': os.path.dirname(file_path),
                        'saved_percentage': saved_percentage,
                        'size_before': file_size_before,
                        'size_after': file_size_after,
                        'saved_bytes': file_size_before - file_size_after,
                        'status': 'optimized'
                    }
                    
                    data['files'].append(file_info)
                    data['optimized_count'] += 1
                    data['total_size_before'] += file_size_before
                    data['total_size_after'] += file_size_after
                    
                    # Update type statistics
                    data['file_types'][file_type]['count'] += 1
                    data['file_types'][file_type]['saved_bytes'] += (file_size_before - file_size_after)
                    data['file_types'][file_type]['original_bytes'] += file_size_before
                
                # Check for skipped files
                elif skipped_pattern.search(line):
                    data['skipped_count'] += 1
                
                # Check for failed files
                elif failed_pattern.search(line):
                    data['failed_count'] += 1
    
    return data

def human_readable_size(size_bytes):
    """Convert bytes to human-readable format"""
    if size_bytes == 0:
        return "0 B"
    size_names = ["B", "KB", "MB", "GB", "TB"]
    i = 0
    while size_bytes >= 1024 and i < len(size_names) - 1:
        size_bytes /= 1024
        i += 1
    return f"{size_bytes:.2f} {size_names[i]}"

def generate_html_report(data, title):
    """Generate HTML report based on the parsed data"""
    # Calculate total savings
    total_saved_bytes = data['total_size_before'] - data['total_size_after']
    if data['total_size_before'] > 0:
        overall_percentage = (total_saved_bytes / data['total_size_before']) * 100
    else:
        overall_percentage = 0
    
    # Sort files by savings (most saved first)
    sorted_files = sorted(data['files'], key=lambda x: x['saved_bytes'], reverse=True)
    
    # Create directory statistics
    dir_stats = defaultdict(lambda: {'count': 0, 'saved_bytes': 0, 'original_bytes': 0})
    for file in data['files']:
        dir_path = file['directory']
        dir_stats[dir_path]['count'] += 1
        dir_stats[dir_path]['saved_bytes'] += file['saved_bytes']
        dir_stats[dir_path]['original_bytes'] += file['size_before']
    
    # Sort directories by savings
    sorted_dirs = sorted(dir_stats.items(), key=lambda x: x[1]['saved_bytes'], reverse=True)
    
    # Generate HTML
    html = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{title}</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }}
        h1, h2, h3 {{
            color: #2c3e50;
        }}
        .summary {{
            background-color: #f8f9fa;
            border-radius: 8px;
            padding: 20px;
            margin-bottom: 30px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }}
        .stat-card {{
            display: inline-block;
            background: white;
            border-left: 4px solid #3498db;
            border-radius: 4px;
            padding: 15px;
            margin: 10px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
            min-width: 200px;
        }}
        .stat-value {{
            font-size: 24px;
            font-weight: bold;
            color: #3498db;
        }}
        .stat-label {{
            font-size: 14px;
            color: #7f8c8d;
        }}
        table {{
            width: 100%;
            border-collapse: collapse;
            margin: 20px 0;
            box-shadow: 0 2px 3px rgba(0,0,0,0.1);
        }}
        th, td {{
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }}
        th {{
            background-color: #3498db;
            color: white;
            position: sticky;
            top: 0;
        }}
        tr:hover {{
            background-color: #f5f5f5;
        }}
        .progress-container {{
            width: 100%;
            background-color: #e0e0e0;
            border-radius: 4px;
            margin: 10px 0;
        }}
        .progress-bar {{
            height: 20px;
            border-radius: 4px;
            background-color: #2ecc71;
            text-align: center;
            line-height: 20px;
            color: white;
            font-weight: bold;
        }}
        .progress-bar.low {{
            background-color: #3498db;
        }}
        .progress-bar.medium {{
            background-color: #f39c12;
        }}
        .progress-bar.high {{
            background-color: #e74c3c;
        }}
        .chart-container {{
            display: flex;
            justify-content: space-between;
            flex-wrap: wrap;
            margin: 20px 0;
        }}
        .chart {{
            width: 48%;
            min-width: 300px;
            margin-bottom: 20px;
            background: white;
            border-radius: 8px;
            padding: 15px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }}
        @media (max-width: 768px) {{
            .chart {{
                width: 100%;
            }}
        }}
        footer {{
            margin-top: 30px;
            text-align: center;
            font-size: 14px;
            color: #7f8c8d;
            padding: 20px;
            border-top: 1px solid #eee;
        }}
    </style>
</head>
<body>
    <h1>{title}</h1>
    
    <div class="summary">
        <h2>Summary</h2>
        <div>
            <div class="stat-card">
                <div class="stat-value">{data['optimized_count']}</div>
                <div class="stat-label">Files Optimized</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{human_readable_size(total_saved_bytes)}</div>
                <div class="stat-label">Total Space Saved</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{overall_percentage:.1f}%</div>
                <div class="stat-label">Overall Savings</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{human_readable_size(data['total_size_before'])}</div>
                <div class="stat-label">Original Size</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">{human_readable_size(data['total_size_after'])}</div>
                <div class="stat-label">New Size</div>
            </div>
        </div>
        
        <h3>Process Information</h3>
        <p><strong>Start Time:</strong> {data['start_time'] or 'Unknown'}</p>
        <p><strong>End Time:</strong> {data['end_time'] or 'Unknown'}</p>
        <p><strong>Files Processed:</strong> {data['optimized_count'] + data['skipped_count'] + data['failed_count']}</p>
        <p><strong>Files Skipped:</strong> {data['skipped_count']}</p>
        <p><strong>Files Failed:</strong> {data['failed_count']}</p>
        
        <div class="progress-container">
            <div class="progress-bar" style="width: {overall_percentage}%">
                {overall_percentage:.1f}% Space Saved
            </div>
        </div>
    </div>
    
    <div class="chart-container">
        <div class="chart">
            <h3>Savings by File Type</h3>
            <table>
                <thead>
                    <tr>
                        <th>File Type</th>
                        <th>Count</th>
                        <th>Original Size</th>
                        <th>Space Saved</th>
                        <th>Savings %</th>
                    </tr>
                </thead>
                <tbody>
"""

    # Add file type statistics
    for file_type, stats in sorted(data['file_types'].items(), key=lambda x: x[1]['saved_bytes'], reverse=True):
        original_bytes = stats['original_bytes']
        saved_bytes = stats['saved_bytes']
        percentage = (saved_bytes / original_bytes * 100) if original_bytes > 0 else 0
        
        html += f"""
                    <tr>
                        <td>{file_type}</td>
                        <td>{stats['count']}</td>
                        <td>{human_readable_size(original_bytes)}</td>
                        <td>{human_readable_size(saved_bytes)}</td>
                        <td>{percentage:.1f}%</td>
                    </tr>
"""

    html += """
                </tbody>
            </table>
        </div>
        
        <div class="chart">
            <h3>Top Directories by Savings</h3>
            <table>
                <thead>
                    <tr>
                        <th>Directory</th>
                        <th>Files</th>
                        <th>Original Size</th>
                        <th>Space Saved</th>
                        <th>Savings %</th>
                    </tr>
                </thead>
                <tbody>
"""

    # Add directory statistics (top 10)
    for dir_path, stats in sorted_dirs[:10]:
        original_bytes = stats['original_bytes']
        saved_bytes = stats['saved_bytes']
        percentage = (saved_bytes / original_bytes * 100) if original_bytes > 0 else 0
        
        html += f"""
                    <tr>
                        <td>{dir_path}</td>
                        <td>{stats['count']}</td>
                        <td>{human_readable_size(original_bytes)}</td>
                        <td>{human_readable_size(saved_bytes)}</td>
                        <td>{percentage:.1f}%</td>
                    </tr>
"""

    html += """
                </tbody>
            </table>
        </div>
    </div>
    
    <h2>Top Files by Space Saved</h2>
    <table>
        <thead>
            <tr>
                <th>File</th>
                <th>Type</th>
                <th>Directory</th>
                <th>Original Size</th>
                <th>New Size</th>
                <th>Space Saved</th>
                <th>Savings %</th>
            </tr>
        </thead>
        <tbody>
"""

    # Add file details (top 50)
    for file in sorted_files[:50]:
        savings_class = "low"
        if file['saved_percentage'] > 30:
            savings_class = "medium"
        if file['saved_percentage'] > 60:
            savings_class = "high"
        
        html += f"""
            <tr>
                <td>{file['filename']}</td>
                <td>{file['type']}</td>
                <td>{file['directory']}</td>
                <td>{human_readable_size(file['size_before'])}</td>
                <td>{human_readable_size(file['size_after'])}</td>
                <td>{human_readable_size(file['saved_bytes'])}</td>
                <td>
                    <div class="progress-container" style="margin: 0;">
                        <div class="progress-bar {savings_class}" style="width: {file['saved_percentage']}%">
                            {file['saved_percentage']}%
                        </div>
                    </div>
                </td>
            </tr>
"""

    html += """
        </tbody>
    </table>
    
    <footer>
        Generated on """ + datetime.now().strftime("%Y-%m-%d %H:%M:%S") + """
    </footer>
</body>
</html>
"""
    
    return html

def main():
    """Main function"""
    args = parse_args()
    
    print(f"Parsing log file: {args.log_file}")
    data = parse_log_file(args.log_file)
    
    print(f"Generating HTML report: {args.output}")
    html = generate_html_report(data, args.title)
    
    with open(args.output, 'w') as f:
        f.write(html)
    
    print(f"Report saved to: {args.output}")
    
    # Print summary to console
    total_saved = data['total_size_before'] - data['total_size_after']
    percentage = (total_saved / data['total_size_before'] * 100) if data['total_size_before'] > 0 else 0
    
    print("\nOptimization Summary:")
    print(f"Files optimized: {data['optimized_count']}")
    print(f"Original size: {human_readable_size(data['total_size_before'])}")
    print(f"New size: {human_readable_size(data['total_size_after'])}")
    print(f"Space saved: {human_readable_size(total_saved)} ({percentage:.1f}%)")
    print(f"Files skipped: {data['skipped_count']}")
    print(f"Files failed: {data['failed_count']}")

if __name__ == "__main__":
    main()
